{-
   OpenAI API

   APIs for sampling from and fine-tuning language models

   OpenAPI Version: 3.0.0
   OpenAI API API version: 2.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OpenAI.API.OpenAI
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OpenAI.API.OpenAI where

import OpenAI.Core
import OpenAI.MimeTypes
import OpenAI.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** OpenAI

-- *** cancelFineTune

-- | @POST \/fine-tunes\/{fine_tune_id}\/cancel@
-- 
-- Immediately cancel a fine-tune job. 
-- 
cancelFineTune
  :: FineTuneId -- ^ "fineTuneId" -  The ID of the fine-tune job to cancel 
  -> OpenAIRequest CancelFineTune MimeNoContent FineTune MimeJSON
cancelFineTune (FineTuneId fineTuneId) =
  _mkRequest "POST" ["/fine-tunes/",toPath fineTuneId,"/cancel"]

data CancelFineTune  
-- | @application/json@
instance Produces CancelFineTune MimeJSON


-- *** createChatCompletion

-- | @POST \/chat\/completions@
-- 
-- Creates a model response for the given chat conversation.
-- 
createChatCompletion
  :: (Consumes CreateChatCompletion MimeJSON, MimeRender MimeJSON CreateChatCompletionRequest)
  => CreateChatCompletionRequest -- ^ "createChatCompletionRequest"
  -> OpenAIRequest CreateChatCompletion MimeJSON CreateChatCompletionResponse MimeJSON
createChatCompletion createChatCompletionRequest =
  _mkRequest "POST" ["/chat/completions"]
    `setBodyParam` createChatCompletionRequest

data CreateChatCompletion 
instance HasBodyParam CreateChatCompletion CreateChatCompletionRequest 

-- | @application/json@
instance Consumes CreateChatCompletion MimeJSON

-- | @application/json@
instance Produces CreateChatCompletion MimeJSON


-- *** createCompletion

-- | @POST \/completions@
-- 
-- Creates a completion for the provided prompt and parameters.
-- 
createCompletion
  :: (Consumes CreateCompletion MimeJSON, MimeRender MimeJSON CreateCompletionRequest)
  => CreateCompletionRequest -- ^ "createCompletionRequest"
  -> OpenAIRequest CreateCompletion MimeJSON CreateCompletionResponse MimeJSON
createCompletion createCompletionRequest =
  _mkRequest "POST" ["/completions"]
    `setBodyParam` createCompletionRequest

data CreateCompletion 
instance HasBodyParam CreateCompletion CreateCompletionRequest 

-- | @application/json@
instance Consumes CreateCompletion MimeJSON

-- | @application/json@
instance Produces CreateCompletion MimeJSON


-- *** createEdit

-- | @POST \/edits@
-- 
-- Creates a new edit for the provided input, instruction, and parameters.
-- 
createEdit
  :: (Consumes CreateEdit MimeJSON, MimeRender MimeJSON CreateEditRequest)
  => CreateEditRequest -- ^ "createEditRequest"
  -> OpenAIRequest CreateEdit MimeJSON CreateEditResponse MimeJSON
createEdit createEditRequest =
  _mkRequest "POST" ["/edits"]
    `setBodyParam` createEditRequest

data CreateEdit 
instance HasBodyParam CreateEdit CreateEditRequest 

-- | @application/json@
instance Consumes CreateEdit MimeJSON

-- | @application/json@
instance Produces CreateEdit MimeJSON


-- *** createEmbedding

-- | @POST \/embeddings@
-- 
-- Creates an embedding vector representing the input text.
-- 
createEmbedding
  :: (Consumes CreateEmbedding MimeJSON, MimeRender MimeJSON CreateEmbeddingRequest)
  => CreateEmbeddingRequest -- ^ "createEmbeddingRequest"
  -> OpenAIRequest CreateEmbedding MimeJSON CreateEmbeddingResponse MimeJSON
createEmbedding createEmbeddingRequest =
  _mkRequest "POST" ["/embeddings"]
    `setBodyParam` createEmbeddingRequest

data CreateEmbedding 
instance HasBodyParam CreateEmbedding CreateEmbeddingRequest 

-- | @application/json@
instance Consumes CreateEmbedding MimeJSON

-- | @application/json@
instance Produces CreateEmbedding MimeJSON


-- *** createFile

-- | @POST \/files@
-- 
-- Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. 
-- 
createFile
  :: (Consumes CreateFile MimeMultipartFormData)
  => File -- ^ "file" -  Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). 
  -> Purpose -- ^ "purpose" -  The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. 
  -> OpenAIRequest CreateFile MimeMultipartFormData OpenAIFile MimeJSON
createFile (File file) (Purpose purpose) =
  _mkRequest "POST" ["/files"]
    `_addMultiFormPart` NH.partFileSource "file" file
    `_addMultiFormPart` NH.partLBS "purpose" (mimeRender' MimeMultipartFormData purpose)

data CreateFile  

-- | @multipart/form-data@
instance Consumes CreateFile MimeMultipartFormData

-- | @application/json@
instance Produces CreateFile MimeJSON


-- *** createFineTune

-- | @POST \/fine-tunes@
-- 
-- Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
-- 
createFineTune
  :: (Consumes CreateFineTune MimeJSON, MimeRender MimeJSON CreateFineTuneRequest)
  => CreateFineTuneRequest -- ^ "createFineTuneRequest"
  -> OpenAIRequest CreateFineTune MimeJSON FineTune MimeJSON
createFineTune createFineTuneRequest =
  _mkRequest "POST" ["/fine-tunes"]
    `setBodyParam` createFineTuneRequest

data CreateFineTune 
instance HasBodyParam CreateFineTune CreateFineTuneRequest 

-- | @application/json@
instance Consumes CreateFineTune MimeJSON

-- | @application/json@
instance Produces CreateFineTune MimeJSON


-- *** createImage

-- | @POST \/images\/generations@
-- 
-- Creates an image given a prompt.
-- 
createImage
  :: (Consumes CreateImage MimeJSON, MimeRender MimeJSON CreateImageRequest)
  => CreateImageRequest -- ^ "createImageRequest"
  -> OpenAIRequest CreateImage MimeJSON ImagesResponse MimeJSON
createImage createImageRequest =
  _mkRequest "POST" ["/images/generations"]
    `setBodyParam` createImageRequest

data CreateImage 
instance HasBodyParam CreateImage CreateImageRequest 

-- | @application/json@
instance Consumes CreateImage MimeJSON

-- | @application/json@
instance Produces CreateImage MimeJSON


-- *** createImageEdit

-- | @POST \/images\/edits@
-- 
-- Creates an edited or extended image given an original image and a prompt.
-- 
createImageEdit
  :: (Consumes CreateImageEdit MimeMultipartFormData)
  => Image -- ^ "image" -  The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
  -> Prompt -- ^ "prompt" -  A text description of the desired image(s). The maximum length is 1000 characters.
  -> OpenAIRequest CreateImageEdit MimeMultipartFormData ImagesResponse MimeJSON
createImageEdit (Image image) (Prompt prompt) =
  _mkRequest "POST" ["/images/edits"]
    `_addMultiFormPart` NH.partFileSource "image" image
    `_addMultiFormPart` NH.partLBS "prompt" (mimeRender' MimeMultipartFormData prompt)

data CreateImageEdit  

-- | /Optional Param/ "mask" - An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
instance HasOptionalParam CreateImageEdit Mask where
  applyOptionalParam req (Mask xs) =
    req `_addMultiFormPart` NH.partFileSource "mask" xs

-- | /Optional Param/ "n" - The number of images to generate. Must be between 1 and 10.
instance HasOptionalParam CreateImageEdit N where
  applyOptionalParam req (N xs) =
    req `_addMultiFormPart` NH.partLBS "n" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "size" - The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
instance HasOptionalParam CreateImageEdit Size where
  applyOptionalParam req (Size xs) =
    req `_addMultiFormPart` NH.partLBS "size" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "response_format" - The format in which the generated images are returned. Must be one of `url` or `b64_json`.
instance HasOptionalParam CreateImageEdit ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `_addMultiFormPart` NH.partLBS "response_format" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "user" - A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
instance HasOptionalParam CreateImageEdit User where
  applyOptionalParam req (User xs) =
    req `_addMultiFormPart` NH.partLBS "user" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateImageEdit MimeMultipartFormData

-- | @application/json@
instance Produces CreateImageEdit MimeJSON


-- *** createImageVariation

-- | @POST \/images\/variations@
-- 
-- Creates a variation of a given image.
-- 
createImageVariation
  :: (Consumes CreateImageVariation MimeMultipartFormData)
  => Image -- ^ "image" -  The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
  -> OpenAIRequest CreateImageVariation MimeMultipartFormData ImagesResponse MimeJSON
createImageVariation (Image image) =
  _mkRequest "POST" ["/images/variations"]
    `_addMultiFormPart` NH.partFileSource "image" image

data CreateImageVariation  

-- | /Optional Param/ "n" - The number of images to generate. Must be between 1 and 10.
instance HasOptionalParam CreateImageVariation N where
  applyOptionalParam req (N xs) =
    req `_addMultiFormPart` NH.partLBS "n" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "size" - The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
instance HasOptionalParam CreateImageVariation Size where
  applyOptionalParam req (Size xs) =
    req `_addMultiFormPart` NH.partLBS "size" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "response_format" - The format in which the generated images are returned. Must be one of `url` or `b64_json`.
instance HasOptionalParam CreateImageVariation ResponseFormat where
  applyOptionalParam req (ResponseFormat xs) =
    req `_addMultiFormPart` NH.partLBS "response_format" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "user" - A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
instance HasOptionalParam CreateImageVariation User where
  applyOptionalParam req (User xs) =
    req `_addMultiFormPart` NH.partLBS "user" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateImageVariation MimeMultipartFormData

-- | @application/json@
instance Produces CreateImageVariation MimeJSON


-- *** createModeration

-- | @POST \/moderations@
-- 
-- Classifies if text violates OpenAI's Content Policy
-- 
createModeration
  :: (Consumes CreateModeration MimeJSON, MimeRender MimeJSON CreateModerationRequest)
  => CreateModerationRequest -- ^ "createModerationRequest"
  -> OpenAIRequest CreateModeration MimeJSON CreateModerationResponse MimeJSON
createModeration createModerationRequest =
  _mkRequest "POST" ["/moderations"]
    `setBodyParam` createModerationRequest

data CreateModeration 
instance HasBodyParam CreateModeration CreateModerationRequest 

-- | @application/json@
instance Consumes CreateModeration MimeJSON

-- | @application/json@
instance Produces CreateModeration MimeJSON


-- *** createTranscription

-- | @POST \/audio\/transcriptions@
-- 
-- Transcribes audio into the input language.
-- 
createTranscription
  :: (Consumes CreateTranscription MimeMultipartFormData)
  => File -- ^ "file" -  The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
  -> Model2 -- ^ "model"
  -> OpenAIRequest CreateTranscription MimeMultipartFormData CreateTranscriptionResponse MimeJSON
createTranscription (File file) (Model2 model) =
  _mkRequest "POST" ["/audio/transcriptions"]
    `_addMultiFormPart` NH.partFileSource "file" file
    `_addMultiFormPart` NH.partLBS "model" (mimeRender' MimeMultipartFormData model)

data CreateTranscription  

-- | /Optional Param/ "prompt" - An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
instance HasOptionalParam CreateTranscription Prompt where
  applyOptionalParam req (Prompt xs) =
    req `_addMultiFormPart` NH.partLBS "prompt" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "response_format" - The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
instance HasOptionalParam CreateTranscription ResponseFormatText where
  applyOptionalParam req (ResponseFormatText xs) =
    req `_addMultiFormPart` NH.partLBS "response_format" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "temperature" - The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
instance HasOptionalParam CreateTranscription Temperature where
  applyOptionalParam req (Temperature xs) =
    req `_addMultiFormPart` NH.partLBS "temperature" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "language" - The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
instance HasOptionalParam CreateTranscription Language where
  applyOptionalParam req (Language xs) =
    req `_addMultiFormPart` NH.partLBS "language" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateTranscription MimeMultipartFormData

-- | @application/json@
instance Produces CreateTranscription MimeJSON


-- *** createTranslation

-- | @POST \/audio\/translations@
-- 
-- Translates audio into English.
-- 
createTranslation
  :: (Consumes CreateTranslation MimeMultipartFormData)
  => File -- ^ "file" -  The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
  -> Model2 -- ^ "model"
  -> OpenAIRequest CreateTranslation MimeMultipartFormData CreateTranslationResponse MimeJSON
createTranslation (File file) (Model2 model) =
  _mkRequest "POST" ["/audio/translations"]
    `_addMultiFormPart` NH.partFileSource "file" file
    `_addMultiFormPart` NH.partLBS "model" (mimeRender' MimeMultipartFormData model)

data CreateTranslation  

-- | /Optional Param/ "prompt" - An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. 
instance HasOptionalParam CreateTranslation Prompt where
  applyOptionalParam req (Prompt xs) =
    req `_addMultiFormPart` NH.partLBS "prompt" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "response_format" - The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
instance HasOptionalParam CreateTranslation ResponseFormatText where
  applyOptionalParam req (ResponseFormatText xs) =
    req `_addMultiFormPart` NH.partLBS "response_format" (mimeRender' MimeMultipartFormData xs)

-- | /Optional Param/ "temperature" - The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
instance HasOptionalParam CreateTranslation Temperature where
  applyOptionalParam req (Temperature xs) =
    req `_addMultiFormPart` NH.partLBS "temperature" (mimeRender' MimeMultipartFormData xs)

-- | @multipart/form-data@
instance Consumes CreateTranslation MimeMultipartFormData

-- | @application/json@
instance Produces CreateTranslation MimeJSON


-- *** deleteFile

-- | @DELETE \/files\/{file_id}@
-- 
-- Delete a file.
-- 
deleteFile
  :: FileId -- ^ "fileId" -  The ID of the file to use for this request
  -> OpenAIRequest DeleteFile MimeNoContent DeleteFileResponse MimeJSON
deleteFile (FileId fileId) =
  _mkRequest "DELETE" ["/files/",toPath fileId]

data DeleteFile  
-- | @application/json@
instance Produces DeleteFile MimeJSON


-- *** deleteModel

-- | @DELETE \/models\/{model}@
-- 
-- Delete a fine-tuned model. You must have the Owner role in your organization.
-- 
deleteModel
  :: Model3 -- ^ "model" -  The model to delete
  -> OpenAIRequest DeleteModel MimeNoContent DeleteModelResponse MimeJSON
deleteModel (Model3 model) =
  _mkRequest "DELETE" ["/models/",toPath model]

data DeleteModel  
-- | @application/json@
instance Produces DeleteModel MimeJSON


-- *** downloadFile

-- | @GET \/files\/{file_id}\/content@
-- 
-- Returns the contents of the specified file
-- 
downloadFile
  :: FileId -- ^ "fileId" -  The ID of the file to use for this request
  -> OpenAIRequest DownloadFile MimeNoContent Text MimeJSON
downloadFile (FileId fileId) =
  _mkRequest "GET" ["/files/",toPath fileId,"/content"]

data DownloadFile  
-- | @application/json@
instance Produces DownloadFile MimeJSON


-- *** listFiles

-- | @GET \/files@
-- 
-- Returns a list of files that belong to the user's organization.
-- 
listFiles
  :: OpenAIRequest ListFiles MimeNoContent ListFilesResponse MimeJSON
listFiles =
  _mkRequest "GET" ["/files"]

data ListFiles  
-- | @application/json@
instance Produces ListFiles MimeJSON


-- *** listFineTuneEvents

-- | @GET \/fine-tunes\/{fine_tune_id}\/events@
-- 
-- Get fine-grained status updates for a fine-tune job. 
-- 
listFineTuneEvents
  :: FineTuneId -- ^ "fineTuneId" -  The ID of the fine-tune job to get events for. 
  -> OpenAIRequest ListFineTuneEvents MimeNoContent ListFineTuneEventsResponse MimeJSON
listFineTuneEvents (FineTuneId fineTuneId) =
  _mkRequest "GET" ["/fine-tunes/",toPath fineTuneId,"/events"]

data ListFineTuneEvents  

-- | /Optional Param/ "stream" - Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. 
instance HasOptionalParam ListFineTuneEvents Stream where
  applyOptionalParam req (Stream xs) =
    req `addQuery` toQuery ("stream", Just xs)
-- | @application/json@
instance Produces ListFineTuneEvents MimeJSON


-- *** listFineTunes

-- | @GET \/fine-tunes@
-- 
-- List your organization's fine-tuning jobs 
-- 
listFineTunes
  :: OpenAIRequest ListFineTunes MimeNoContent ListFineTunesResponse MimeJSON
listFineTunes =
  _mkRequest "GET" ["/fine-tunes"]

data ListFineTunes  
-- | @application/json@
instance Produces ListFineTunes MimeJSON


-- *** listModels

-- | @GET \/models@
-- 
-- Lists the currently available models, and provides basic information about each one such as the owner and availability.
-- 
listModels
  :: OpenAIRequest ListModels MimeNoContent ListModelsResponse MimeJSON
listModels =
  _mkRequest "GET" ["/models"]

data ListModels  
-- | @application/json@
instance Produces ListModels MimeJSON


-- *** retrieveFile

-- | @GET \/files\/{file_id}@
-- 
-- Returns information about a specific file.
-- 
retrieveFile
  :: FileId -- ^ "fileId" -  The ID of the file to use for this request
  -> OpenAIRequest RetrieveFile MimeNoContent OpenAIFile MimeJSON
retrieveFile (FileId fileId) =
  _mkRequest "GET" ["/files/",toPath fileId]

data RetrieveFile  
-- | @application/json@
instance Produces RetrieveFile MimeJSON


-- *** retrieveFineTune

-- | @GET \/fine-tunes\/{fine_tune_id}@
-- 
-- Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) 
-- 
retrieveFineTune
  :: FineTuneId -- ^ "fineTuneId" -  The ID of the fine-tune job 
  -> OpenAIRequest RetrieveFineTune MimeNoContent FineTune MimeJSON
retrieveFineTune (FineTuneId fineTuneId) =
  _mkRequest "GET" ["/fine-tunes/",toPath fineTuneId]

data RetrieveFineTune  
-- | @application/json@
instance Produces RetrieveFineTune MimeJSON


-- *** retrieveModel

-- | @GET \/models\/{model}@
-- 
-- Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
-- 
retrieveModel
  :: Model3 -- ^ "model" -  The ID of the model to use for this request
  -> OpenAIRequest RetrieveModel MimeNoContent Model MimeJSON
retrieveModel (Model3 model) =
  _mkRequest "GET" ["/models/",toPath model]

data RetrieveModel  
-- | @application/json@
instance Produces RetrieveModel MimeJSON

